This problem was asked by Amazon.

Given an array of numbers, find the maximum sum of any contiguous subarray of the array.

For example, given the array [34, -50, 42, 14, -5, 86], the maximum sum would be 137, since we would take elements 42, 14, -5, and 86.
Given the array [-5, -1, -8, -9], the maximum sum would be -1.

Follow up: Do this in O(N) time.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Input Format:
The first line of input contains size of array, which is denoted by N and second line of input contains N space separated integers.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Output Format:
The first and only line of output should print the maximum subarray sum, as described in the description.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------



THE CODE:-
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;

public class Main {

	
	public static void main(String[] args) {

		 Scanner scan = new Scanner(System.in);
        int N = scan.nextInt();
        int[] arr = new int[ N ];
        for (int i = 0; i < N; i++)
            arr[i] = scan.nextInt();
        System.out.println(max_sum(arr));

	}
	 public static int max_sum(int[] arr)
    {
        int N = arr.length, max = Integer.MIN_VALUE;
        for (int i = 0; i < N; i++)
        {
            int sum = 0;
            for (int j = i; j < N; j++)
            {
                sum += arr[j];
                if (sum > max)
                    max = sum;
            }
        }
        return max;    
    }

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
